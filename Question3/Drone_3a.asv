%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%  Code modified by Francisco Vasconcelos from
%%%%
%%%%  Drone class, feel free to add functionality as you see fit
%%%%  Author: Daniel Butters
%%%%  Date: 16/11/17
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
classdef Drone_3a < handle
    properties (Constant)
        %width, length, height offset between centre and rotors
        body = [0.6 0.6 0.0];
        
        %time interval for simulation (seconds)
        time_interval = 0.02;
        
        % size of floating window that follows drone
        axis_size = 2.;
        
        %colours of each component of drone model
        colours = [[.8 .3 .1];[.2 .2 .5];[.8 .1 .3];[.9 .6 .8];[.9 .2 .4]];
        
        %Follows the drone within the figure
        %Don't use if you are simulating more than one drone!
        %Switch to false to see the overall world view
        drone_follow = true;
    end
    properties
        axis
        
        %length of one side of the flight arena
        spaceDim
        
        %limits of flight arena
        spaceLimits
        
        %drone position
        pos
        
        %drone rotation matrix
        R
        
        
        %Simulation time
        time
        
        %parameter to start drone in random position
        pos_offset
        
        %number of drones
        num_drones
        
        m
        
        I
        
        g
        
        kd
        
        k
        
        L
        
        b
        
        x
        y

        xdot 
        
        theta 
        
        thetadot
        
        omega
        
        omegadot

        A
        B
        C
        D

        p
        K

        state
        u




    end
    methods
        
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %INSTANTIATION OF CLASS
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        function obj = Drone_3a(axis, spaceDim, num_drones,pos_offset)
            if nargin > 1
                obj.axis = axis;
                
                obj.spaceDim = spaceDim;
                
                obj.spaceLimits = [(-spaceDim/2)+10 (spaceDim/2)-10 (-spaceDim/2)+10 (spaceDim/2)-10 10 spaceDim-10];
                
                obj.pos = [0;0;0];
                
                obj.pos_offset = pos_offset;

                obj.pos=obj.pos+obj.pos_offset;
                
                obj.R = [1,0,0;0,1,0;0,0,1];
                
                obj.time = 0;
                
                obj.num_drones = num_drones;

                obj.m=0.2;
                obj.I=[1 0 0;0 1 0;0 0 0.5];
                obj.kd=0.1;
                obj.g=9.8;
                obj.L=0.2;
                obj.b=0.1;
                obj.k=1;
                obj.xdot=[0;0;0];
                obj.u=[0,0,0,0];
                obj.theta=[0;0;0];
                obj.omega=[0;0;0];            
                obj.thetadot=[0;0;0];
                obj.x = [0;0;0];

            else
                error('Drone not initialised correctly')
            end
        end
        
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %DRAWING OF DRONE TO FIGURE
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        function draw(obj)
            %how big should the moving window be
            cL = obj.axis_size;
            
            %set to false if you want to see world view
            %if(obj.drone_follow)
            %    axis([obj.pos(1)-cL obj.pos(1)+cL obj.pos(2)-cL obj.pos(2)+cL obj.pos(3)-cL obj.pos(3)+cL]);
            %end
            
            %create middle sphere
            [X Y Z] = sphere(8);
            %[X Y Z] = (obj.body(1)/5.).*[X Y Z];
            X = (obj.body(1)/5.).*X + obj.pos(1);
            Y = (obj.body(1)/5.).*Y + obj.pos(2);
            Z = (obj.body(1)/5.).*Z + obj.pos(3);
            s = surf(obj.axis,X,Y,Z);
            set(s,'edgecolor','none','facecolor',obj.colours(1,:));
            
            %create side spheres
            %front, right, back, left
            hOff = obj.body(3)/2;
            Lx = obj.body(1)/2;
            Ly = obj.body(2)/2;
            rotorsPosBody = [...
                0    Ly    0    -Ly;
                Lx    0    -Lx   0;
                hOff hOff hOff hOff];
            rotorsPosInertial = zeros(3,4);
            for i = 1:4
                rotorPosBody = rotorsPosBody(:,i);
                rotorsPosInertial(:,i) = bodyToInertial(obj,rotorPosBody);
                [X Y Z] = sphere(8);
                X = (obj.body(1)/8.).*X + obj.pos(1) + rotorsPosInertial(1,i);
                Y = (obj.body(1)/8.).*Y + obj.pos(2) + rotorsPosInertial(2,i);
                Z = (obj.body(1)/8.).*Z + obj.pos(3) + rotorsPosInertial(3,i);
                s = surf(obj.axis,X,Y,Z);
                set(s,'edgecolor','none','facecolor',obj.colours(i+1,:));
            end
            obj.axis.Title.String = ['Sim Time = ',num2str(obj.time,'%f'),' seconds'];
        end
        
        function vectorInertial = bodyToInertial(obj, vectorBody)
            vectorInertial = obj.R*vectorBody;
        end
        
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %SIMULATION FUNCTIONS
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        
        %demo (not useful) code to show varying position and rotation
        %replace with your own functions!
        function obj = change_pos_and_orientation(obj)
            t = obj.time;
            dt = 0.02;

            function a = acceleration(inputs, angles, xdot, m, g, k, kd)
                gravity = [0; 0; -g];
                R = rotation(angles);
                T = R * thrust(inputs, k);
                Fd = -kd * xdot;
                a = gravity + 1 / m * T + Fd;
            end
            function R = rotation(angles)
                R = [cos(angles(3))*cos(angles(2)) cos(angles(3))*sin(angles(1))*sin(angles(2))-cos(angles(1))*sin(angles(3)) sin(angles(1))*sin(angles(3))+cos(angles(1))*cos(angles(3))*sin(angles(2));
                sin(angles(3))*cos(angles(2)) cos(angles(1))*cos(angles(3))+sin(angles(1))*sin(angles(3))*sin(angles(2)) cos(angles(1))*sin(angles(3))*sin(angles(2))-cos(angles(3))*sin(angles(1));
                -sin(angles(2)) cos(angles(2))*sin(angles(1))  cos(angles(1))*cos(angles(2))];
            end
            function T = thrust(inputs, k)
                % Inputs are values for ωi
                T = [0; 0; k * sum(inputs)];
            end
            
            function omega = thetadot2omega(thetadot,theta)
                mul = [1 0 -sin(theta(2));
                0 cos(theta(1)) cos(theta(2))*sin(theta(1));
                0 -sin(theta(1)) cos(theta(2))*cos(theta(1))];
                omega = mul*thetadot;
            end
            
            function thetadot = omega2thetadot(omega,theta)
                mul = [1 0 -sin(theta(2));
                0 cos(theta(1)) cos(theta(2))*sin(theta(1));
                0 -sin(theta(1)) cos(theta(2))*cos(theta(1))];
            %omega/mul
                thetadot = inv(mul)*omega;
            end
            function omegadot = angular_acceleration(inputs, omega, I, L, b, k)
                tau = torques(inputs, L, b, k);
                omegadot = inv(I) * (tau - cross(omega, I * omega));
            end
            
            % Compute torques, given current inputs, length, drag coefficient, and thrust coefficient.
            function tau = torques(inputs, L, b, k)
                % Inputs are values for ωi
                tau = [
                 L * k * (inputs(1) - inputs(3))
                 L * k * (inputs(2) - inputs(4))
                 b * (inputs(1) - inputs(2) + inputs(3) - inputs(4))
                 ];
            end
            %update acceleration

            a = acceleration(obj.u,obj.theta,obj.xdot,obj.m, obj.g, obj.k, obj.kd);
            
            

            

            %update the velocity 
            obj.xdot = obj.xdot + dt * a;
            %update position
            obj.x = obj.x + dt * obj.xdot;
            pos_mat = obj.x

            obj.omegadot = angular_acceleration(obj.u, obj.omega, obj.I, obj.L, obj.b, obj.k);
            obj.omega = thetadot2omega(obj.thetadot,obj.theta)
%     

            obj.omega = obj.omega + dt * obj.omegadot;
            obj.thetadot = omega2thetadot(obj.omega, obj.theta);
            obj.theta = obj.theta+obj.thetadot*dt

            %theta_dot_to_omega_matrix=[1 0 -sin(obj.theta(2));0 cos(obj.theta(1)) cos(obj.theta(2))*sin(obj.theta(1));0 -sin(obj.theta(1)) cos(obj.theta(2))*cos(obj.theta(1)) ];
            
            %----------
            %----------
%             obj.omega=theta_dot_to_omega_matrix*obj.thetadot;

            %update the torques for yaw, pitch and roll
%             obj.torques(1)=obj.L*obj.k*(obj.u(1)-obj.u(3));
%             obj.torques(2)=obj.L*obj.k*(obj.u(2)-obj.u(4));
%             obj.torques(3)=obj.b*(obj.u(1)-obj.u(2)+obj.u(3)-obj.u(4));




            %update omega_dot
            %obj.omegadot=obj.I^(-1)*(obj.torques-cross(obj.omega,obj.I*obj.omega));
            
            %update omega
%             obj.omega=obj.omega+obj.time_interval*obj.omegadot;

            %update theta_dot
%             obj.thetadot=theta_dot_to_omega_matrix^(-1)*obj.omega;

            %update yaw pitch and roll
%             obj.theta=obj.theta+obj.thetadot*obj.time_interval;

            rot_mat = eul2rotm(obj.theta',"XYZ");
            
            %update position and rotation matrix of drone
            obj.pos = pos_mat;
            obj.R = rot_mat;
        end
        
        
        function update(obj)
            %update simulation time
            obj.time = obj.time + obj.time_interval;
            
            
            %change position and orientation of drone
            obj = change_pos_and_orientation(obj); 
            %draw drone on figure
                draw(obj);

        end
    end
end
